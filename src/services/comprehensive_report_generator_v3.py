#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v3.0 - Comprehensive Report Generator V3
Compilador de relat√≥rio final a partir dos m√≥dulos gerados
"""

import os
import logging
import json
from typing import Dict, Any, List
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)

class ComprehensiveReportGeneratorV3:
    """Compilador de relat√≥rio final ultra robusto"""

    def __init__(self):
        """Inicializa o compilador"""
        # Ordem atualizada dos m√≥dulos, incluindo os novos m√≥dulos de CPL
        self.modules_order = [
            "anti_objecao",
            "avatars", 
            "concorrencia",
            "drivers_mentais",
            "funil_vendas",
            "insights_mercado",
            "palavras_chave",
            "plano_acao",
            "posicionamento",
            "pre_pitch",
            "predicoes_futuro",
            "provas_visuais",
            "metricas_conversao",
            "estrategia_preco",
            "canais_aquisicao",
            "cronograma_lancamento",
            # Novos m√≥dulos de CPL adicionados conforme instru√ß√µes do CPL.txt
            "cpl_completo" # Alterado para o nome do m√≥dulo √∫nico
        ]

        # T√≠tulos atualizados, incluindo os novos m√≥dulos de CPL
        self.module_titles = {
            "anti_objecao": "Sistema Anti-Obje√ß√£o",
            "avatars": "Avatares do P√∫blico-Alvo",
            "concorrencia": "An√°lise Competitiva",
            "drivers_mentais": "Drivers Mentais",
            "funil_vendas": "Funil de Vendas",
            "insights_mercado": "Insights de Mercado",
            "palavras_chave": "Estrat√©gia de Palavras-Chave",
            "plano_acao": "Plano de A√ß√£o",
            "posicionamento": "Estrat√©gia de Posicionamento",
            "pre_pitch": "Estrutura de Pr√©-Pitch",
            "predicoes_futuro": "Predi√ß√µes de Mercado",
            "provas_visuais": "Sistema de Provas Visuais",
            "metricas_conversao": "M√©tricas de Convers√£o",
            "estrategia_preco": "Estrat√©gia de Precifica√ß√£o",
            "canais_aquisicao": "Canais de Aquisi√ß√£o",
            "cronograma_lancamento": "Cronograma de Lan√ßamento",
            "cpl_completo": "Protocolo Integrado de CPLs Devastadores"
        }

        logger.info("üìã Comprehensive Report Generator ULTRA ROBUSTO inicializado")

    def compile_final_markdown_report(self, session_id: str, predictive_insights: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Compila relat√≥rio final a partir dos m√≥dulos gerados e insights preditivos.

        Args:
            session_id: ID da sess√£o
            predictive_insights: Dicion√°rio com os insights preditivos do PredictiveAnalyticsEngine.

        Returns:
            Dict com informa√ß√µes do relat√≥rio compilado
        """
        logger.info(f"üìã Compilando relat√≥rio final para sess√£o: {session_id}")

        try:
            # 1. Verifica estrutura de diret√≥rios
            session_dir = Path(f"analyses_data/{session_id}")
            modules_dir = session_dir / "modules"
            files_dir = Path(f"analyses_data/files/{session_id}")

            if not session_dir.exists():
                raise Exception(f"Diret√≥rio da sess√£o n√£o encontrado: {session_dir}")

            # 2. Carrega m√≥dulos dispon√≠veis
            available_modules = self._load_available_modules(modules_dir)

            # 3. Carrega screenshots dispon√≠veis
            screenshot_paths = self._load_screenshot_paths(files_dir)

            # 4. Compila relat√≥rio
            final_report = self._compile_report_content(
                session_id, 
                available_modules, 
                screenshot_paths,
                predictive_insights # Passa os insights preditivos
            )

            # 5. Salva relat√≥rio final
            report_path = self._save_final_report(session_id, final_report)

            # 6. Gera estat√≠sticas
            statistics = self._generate_report_statistics(
                available_modules, 
                screenshot_paths, 
                final_report
            )

            logger.info(f"‚úÖ Relat√≥rio final compilado: {report_path}")

            return {
                "success": True,
                "session_id": session_id,
                "report_path": report_path,
                "modules_compiled": len(available_modules),
                "screenshots_included": len(screenshot_paths),
                "estatisticas_relatorio": statistics,
                "timestamp": datetime.now().isoformat()
            }

        except Exception as e:
            logger.error(f"‚ùå Erro na compila√ß√£o: {e}")
            return {
                "success": False,
                "error": str(e),
                "session_id": session_id,
                "timestamp": datetime.now().isoformat()
            }

    def _load_available_modules(self, modules_dir: Path) -> Dict[str, str]:
        """Carrega m√≥dulos dispon√≠veis"""
        available_modules = {}

        try:
            if not modules_dir.exists():
                logger.warning(f"‚ö†Ô∏è Diret√≥rio de m√≥dulos n√£o existe: {modules_dir}")
                return available_modules

            for module_name in self.modules_order:
                # Primeiro tenta carregar arquivo .md
                module_file = modules_dir / f"{module_name}.md"
                if module_file.exists():
                    with open(module_file, "r", encoding="utf-8") as f:
                        content = f.read()
                        if content.strip():
                            available_modules[module_name] = content
                            logger.debug(f"‚úÖ M√≥dulo carregado: {module_name}")
                        else:
                            logger.warning(f"‚ö†Ô∏è M√≥dulo vazio: {module_name}")
                else:
                    # Se n√£o encontrar .md, tenta carregar arquivo .json (para m√≥dulos CPL)
                    module_file_json = modules_dir / f"{module_name}.json"
                    if module_file_json.exists():
                        try:
                            with open(module_file_json, "r", encoding="utf-8") as f:
                                json_content = json.load(f)
                                # Converte o conte√∫do JSON em uma representa√ß√£o em texto
                                content = json.dumps(json_content, indent=2, ensure_ascii=False)
                                available_modules[module_name] = content
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Erro ao carregar m√≥dulo JSON {module_name}: {e}")
                    else:
                        logger.warning(f"‚ö†Ô∏è M√≥dulo n√£o encontrado: {module_name}")

            logger.info(f"üìä {len(available_modules)}/{len(self.modules_order)} m√≥dulos carregados")
            return available_modules

        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar m√≥dulos: {e}")
            return available_modules

    def _load_screenshot_paths(self, files_dir: Path) -> List[str]:
        """Carrega caminhos dos screenshots"""
        screenshot_paths = []

        try:
            if not files_dir.exists():
                logger.warning(f"‚ö†Ô∏è Diret√≥rio de arquivos n√£o existe: {files_dir}")
                return screenshot_paths

            # Busca por arquivos PNG (screenshots)
            for screenshot_file in files_dir.glob("*.png"):
                relative_path = f"files/{files_dir.name}/{screenshot_file.name}"
                screenshot_paths.append(relative_path)
                logger.debug(f"üì∏ Screenshot encontrado: {screenshot_file.name}")

            logger.info(f"üì∏ {len(screenshot_paths)} screenshots encontrados")
            return screenshot_paths

        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar screenshots: {e}")
            return screenshot_paths

    def _compile_report_content(
        self, 
        session_id: str, 
        modules: Dict[str, str], 
        screenshots: List[str],
        predictive_insights: Dict[str, Any] = None
    ) -> str:
        """Compila conte√∫do do relat√≥rio final"""

        # Cabe√ßalho do relat√≥rio
        report = f"""# RELAT√ìRIO FINAL - ARQV30 Enhanced v3.0

**Sess√£o:** {session_id}  
**Gerado em:** {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}  
**M√≥dulos Compilados:** {len(modules)}/{len(self.modules_order)}  
**Screenshots Inclu√≠dos:** {len(screenshots)}

---

## SUM√ÅRIO EXECUTIVO

Este relat√≥rio consolida a an√°lise ultra-detalhada realizada pelo sistema ARQV30 Enhanced v3.0, contemplando {len(modules)} m√≥dulos especializados de an√°lise estrat√©gica.

### M√≥dulos Inclu√≠dos:
"""

        # Lista de m√≥dulos
        for i, module_name in enumerate(self.modules_order, 1):
            title = self.module_titles.get(module_name, module_name.replace("_", " ").title())
            status = "‚úÖ" if module_name in modules else "‚ùå"
            report += f"{i}. {status} {title}\n"

        report += "\n---\n\n"

        # Adiciona insights preditivos se dispon√≠veis
        if predictive_insights:
            report += "## INSIGHTS PREDITIVOS E CEN√ÅRIOS FUTUROS\n\n"
            report += "Esta se√ß√£o apresenta as an√°lises preditivas e os cen√°rios futuros gerados pelo Predictive Analytics Engine, oferecendo uma vis√£o antecipada de tend√™ncias e oportunidades.\n\n"
            
            # Adiciona insights textuais
            if predictive_insights.get("textual_insights"):
                report += "### An√°lise Textual Ultra-Profunda\n"
                report += f"Total de palavras: {predictive_insights['textual_insights'].get('total_words', 'N/A')}\n"
                report += f"Palavras √∫nicas: {predictive_insights['textual_insights'].get('unique_words', 'N/A')}\n"
                report += f"Score de legibilidade: {predictive_insights['textual_insights'].get('readability_score', 'N/A'):.2f}\n"
                report += f"Distribui√ß√£o de sentimento: {json.dumps(predictive_insights['textual_insights'].get('sentiment_distribution', {}), indent=2, ensure_ascii=False)}\n"
                report += f"Palavras-chave principais: {', '.join(predictive_insights['textual_insights'].get('top_keywords', []))}\n"
                report += f"Entidades principais: {json.dumps(predictive_insights['textual_insights'].get('top_entities', {}), indent=2, ensure_ascii=False)}\n"
                if predictive_insights['textual_insights'].get('topic_modeling', {}).get('topics'):
                    report += "Modelagem de T√≥picos:\n"
                    for topic in predictive_insights['textual_insights']['topic_modeling']['topics']:
                        report += f"  - T√≥pico {topic['id']}: {topic['keywords']}\n"
                report += "\n"

            # Adiciona tend√™ncias temporais
            if predictive_insights.get("temporal_trends"):
                report += "### Tend√™ncias Temporais e Proje√ß√µes\n"
                report += f"Volume de conte√∫do futuro (90 dias): {predictive_insights['temporal_trends'].get('future_projections', {}).get('content_volume', {}).get('value_in_90_days', 'N/A'):.2f}\n"
                report += f"Tend√™ncia de sentimento futuro (90 dias): {predictive_insights['temporal_trends'].get('future_projections', {}).get('average_sentiment', {}).get('value_in_90_days', 'N/A'):.2f}\n"
                report += "\n"

            # Adiciona an√°lise de qualidade dos dados
            if predictive_insights.get("data_quality_assessment"):
                report += "### Avalia√ß√£o da Qualidade dos Dados\n"
                report += f"Score de completude: {predictive_insights['data_quality_assessment'].get('completeness_score', 'N/A'):.2f}%\n"
                report += f"Score de consist√™ncia: {predictive_insights['data_quality_assessment'].get('consistency_score', 'N/A'):.2f}%\n"
                report += f"Score de temporalidade: {predictive_insights['data_quality_assessment'].get('timeliness_score', 'N/A'):.2f}%\n"
                report += f"Score de relev√¢ncia: {predictive_insights['data_quality_assessment'].get('relevance_score', 'N/A'):.2f}%\n"
                report += f"Score de qualidade geral: {predictive_insights['data_quality_assessment'].get('overall_quality_score', 'N/A'):.2f}%\n"
                if predictive_insights['data_quality_assessment'].get('issues_detected'):
                    report += "Problemas detectados: " + ", ".join(predictive_insights['data_quality_assessment']['issues_detected']) + "\n"
                report += "\n"

            # Adiciona previs√µes
            if predictive_insights.get("predictions"):
                report += "### Previs√µes Ultra-Avan√ßadas\n"
                report += f"Previs√£o de tend√™ncia de mercado: {predictive_insights['predictions'].get('market_trend_forecast', {}).get('overall_trend', 'N/A')}\n"
                report += f"Potencial de conte√∫do viral: {predictive_insights['predictions'].get('viral_content_potential', {}).get('highest_engagement_score', 'N/A')}\n"
                report += f"Outlook geral do mercado: {predictive_insights['predictions'].get('overall_market_outlook', 'N/A')}\n"
                report += "\n"

            # Adiciona cen√°rios
            if predictive_insights.get("scenarios"):
                report += "### Modelagem de Cen√°rios Complexos\n"
                report += "**Cen√°rio Otimista:**\n"
                report += f"  - Crescimento de Mercado: {predictive_insights['scenarios'].get('optimistic', {}).get('market_growth', 'N/A')}\n"
                report += f"  - Sentimento: {predictive_insights['scenarios'].get('optimistic', {}).get('sentiment', 'N/A')}\n"
                report += f"  - Recomenda√ß√£o: {predictive_insights['scenarios'].get('optimistic', {}).get('recommendation', 'N/A')}\n"
                report += "**Cen√°rio Realista:**\n"
                report += f"  - Crescimento de Mercado: {predictive_insights['scenarios'].get('realistic', {}).get('market_growth', 'N/A')}\n"
                report += f"  - Sentimento: {predictive_insights['scenarios'].get('realistic', {}).get('sentiment', 'N/A')}\n"
                report += f"  - Recomenda√ß√£o: {predictive_insights['scenarios'].get('realistic', {}).get('recommendation', 'N/A')}\n"
                report += "**Cen√°rio Pessimista:**\n"
                report += f"  - Crescimento de Mercado: {predictive_insights['scenarios'].get('pessimistic', {}).get('market_growth', 'N/A')}\n"
                report += f"  - Sentimento: {predictive_insights['scenarios'].get('pessimistic', {}).get('sentiment', 'N/A')}\n"
                report += f"  - Recomenda√ß√£o: {predictive_insights['scenarios'].get('pessimistic', {}).get('recommendation', 'N/A')}\n"
                report += "\n"

            # Adiciona avalia√ß√£o de riscos e oportunidades
            if predictive_insights.get("risk_assessment"):
                report += "### Avalia√ß√£o de Riscos e Oportunidades\n"
                report += f"Score de Risco: {predictive_insights['risk_assessment'].get('risk_score', 'N/A'):.2f}\n"
                report += f"Score de Oportunidade: {predictive_insights['risk_assessment'].get('opportunity_score', 'N/A'):.2f}\n"
                if predictive_insights['risk_assessment'].get('identified_risks'):
                    report += "Riscos Identificados:\n"
                    for risk in predictive_insights['risk_assessment']['identified_risks']:
                        report += f"  - Tipo: {risk.get('type', 'N/A')}, Descri√ß√£o: {risk.get('description', 'N/A')}, Severidade: {risk.get('severity', 'N/A')}\n"
                if predictive_insights['risk_assessment'].get('identified_opportunities'):
                    report += "Oportunidades Identificadas:\n"
                    for opp in predictive_insights['risk_assessment']['identified_opportunities']:
                        report += f"  - Tipo: {opp.get('type', 'N/A')}, Descri√ß√£o: {opp.get('description', 'N/A')}, Impacto: {opp.get('impact', 'N/A')}\n"
                report += "\n"

            # Adiciona mapeamento de oportunidades estrat√©gicas
            if predictive_insights.get("opportunity_mapping"):
                report += "### Mapeamento de Oportunidades Estrat√©gicas\n"
                if predictive_insights['opportunity_mapping'].get('product_development'):
                    report += "Desenvolvimento de Produto:\n"
                    for item in predictive_insights['opportunity_mapping']['product_development']:
                        report += f"  - {item.get('description', 'N/A')}\n"
                if predictive_insights['opportunity_mapping'].get('marketing_campaigns'):
                    report += "Campanhas de Marketing:\n"
                    for item in predictive_insights['opportunity_mapping']['marketing_campaigns']:
                        report += f"  - {item.get('description', 'N/A')}\n"
                if predictive_insights['opportunity_mapping'].get('content_strategy'):
                    report += "Estrat√©gia de Conte√∫do:\n"
                    for item in predictive_insights['opportunity_mapping']['content_strategy']:
                        report += f"  - {item.get('description', 'N/A')}\n"
                report += "\n"

            # Adiciona m√©tricas de confian√ßa
            if predictive_insights.get("confidence_metrics"):
                report += "### M√©tricas de Confian√ßa\n"
                report += f"Score de Cobertura de Dados: {predictive_insights['confidence_metrics'].get('data_coverage_score', 'N/A'):.2f}%\n"
                report += f"Score de Precis√£o do Modelo: {predictive_insights['confidence_metrics'].get('model_accuracy_score', 'N/A'):.2f}%\n"
                report += f"Score de Estabilidade da Previs√£o: {predictive_insights['confidence_metrics'].get('prediction_stability_score', 'N/A'):.2f}%\n"
                report += f"Score de Confian√ßa Geral: {predictive_insights['confidence_metrics'].get('overall_confidence_score', 'N/A'):.2f}%\n"
                report += "\n"

            # Adiciona recomenda√ß√µes estrat√©gicas
            if predictive_insights.get("strategic_recommendations"):
                report += "### Recomenda√ß√µes Estrat√©gicas\n"
                if predictive_insights['strategic_recommendations'].get('short_term'):
                    report += "Curto Prazo:\n"
                    for rec in predictive_insights['strategic_recommendations']['short_term']:
                        report += f"  - A√ß√£o: {rec.get('action', 'N/A')}, Prioridade: {rec.get('priority', 'N/A')}\n"
                if predictive_insights['strategic_recommendations'].get('medium_term'):
                    report += "M√©dio Prazo:\n"
                    for rec in predictive_insights['strategic_recommendations']['medium_term']:
                        report += f"  - A√ß√£o: {rec.get('action', 'N/A')}, Prioridade: {rec.get('priority', 'N/A')}\n"
                if predictive_insights['strategic_recommendations'].get('long_term'):
                    report += "Longo Prazo:\n"
                    for rec in predictive_insights['strategic_recommendations']['long_term']:
                        report += f"  - A√ß√£o: {rec.get('action', 'N/A')}, Prioridade: {rec.get('priority', 'N/A')}\n"
                report += "\n"

            # Adiciona prioriza√ß√£o de a√ß√µes
            if predictive_insights.get("action_priorities"):
                report += "### Prioriza√ß√£o de A√ß√µes\n"
                for priority_level, actions in predictive_insights['action_priorities'].items():
                    if actions:
                        report += f"{priority_level.replace('_', ' ').title()}:\n"
                        for action in actions:
                            report += f"  - {action.get('action', 'N/A')}\n"
                report += "\n"

            report += "---\n\n"

        # Adiciona screenshots se dispon√≠veis
        if screenshots:
            report += "## EVID√äNCIAS VISUAIS\n\n"
            for i, screenshot in enumerate(screenshots, 1):
                report += f"### Screenshot {i}\n"
                report += f"![Screenshot {i}]({screenshot})\n\n"
            report += "---\n\n"

        # Compila m√≥dulos na ordem definida
        for module_name in self.modules_order:
            if module_name in modules:
                title = self.module_titles.get(module_name, module_name.replace("_", " ").title())
                report += f"## {title}\n\n"
                
                # Trata m√≥dulos CPL de forma especial (JSON)
                if module_name == "cpl_completo": # Alterado para o nome do m√≥dulo √∫nico
                    try:
                        # Tenta parsear o conte√∫do como JSON
                        module_content = json.loads(modules[module_name])
                        report += self._format_cpl_module_content(module_content)
                    except json.JSONDecodeError:
                        # Se n√£o for JSON v√°lido, adiciona o conte√∫do como est√°
                        report += modules[module_name]
                else:
                    # M√≥dulos normais em Markdown
                    report += modules[module_name]
                
                report += "\n\n---\n\n"

        # Rodap√©
        report += f"""
## INFORMA√á√ïES T√âCNICAS

**Sistema:** ARQV30 Enhanced v3.0  
**Sess√£o:** {session_id}  
**Data de Compila√ß√£o:** {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}  
**M√≥dulos Processados:** {len(modules)}/{len(self.modules_order)}  
**Status:** {"Completo" if len(modules) == len(self.modules_order) else "Parcial"}

### Estat√≠sticas de Compila√ß√£o:
- ‚úÖ Sucessos: {len(modules)}
- ‚ùå Falhas: {len(self.modules_order) - len(modules)}
- üìä Taxa de Sucesso: {(len(modules)/len(self.modules_order)*100):.1f}%

---

*Relat√≥rio compilado automaticamente pelo ARQV30 Enhanced v3.0*
"""

        return report

    def _format_cpl_module_content(self, cpl_content: Dict[str, Any]) -> str:
        """Formata o conte√∫do de um m√≥dulo CPL para exibi√ß√£o no relat√≥rio"""
        formatted_content = ""
        
        # Adiciona t√≠tulo e descri√ß√£o se dispon√≠veis
        if "titulo" in cpl_content:
            formatted_content += f"**{cpl_content["titulo"]}**\n\n"
        
        if "descricao" in cpl_content:
            formatted_content += f"{cpl_content["descricao"]}\n\n"
        
        # Adiciona fases se dispon√≠veis
        if "fases" in cpl_content:
            for fase_key, fase_data in cpl_content["fases"].items():
                if isinstance(fase_data, dict):
                    # T√≠tulo da fase
                    if "titulo" in fase_data:
                        formatted_content += f"### {fase_data["titulo"]}\n\n"
                    
                    # Descri√ß√£o da fase
                    if "descricao" in fase_data:
                        formatted_content += f"{fase_data["descricao"]}\n\n"
                    
                    # Outros campos da fase
                    for key, value in fase_data.items():
                        if key not in ["titulo", "descricao"]:
                            if isinstance(value, str):
                                formatted_content += f"**{key.replace("_", " ").title()}:** {value}\n\n"
                            elif isinstance(value, list):
                                formatted_content += f"**{key.replace("_", " ").title()}:**\n"
                                for item in value:
                                    if isinstance(item, str):
                                        formatted_content += f"- {item}\n"
                                    elif isinstance(item, dict):
                                        formatted_content += f"- {json.dumps(item, ensure_ascii=False)}\n"
                                formatted_content += "\n"
                            elif isinstance(value, dict):
                                formatted_content += f"**{key.replace("_", " ").title()}:**\n"
                                for sub_key, sub_value in value.items():
                                    formatted_content += f"  - {sub_key}: {sub_value}\n"
                                formatted_content += "\n"
                
        # Adiciona considera√ß√µes finais se dispon√≠veis
        if "consideracoes_finais" in cpl_content:
            formatted_content += "### Considera√ß√µes Finais\n\n"
            for key, value in cpl_content["consideracoes_finais"].items():
                if isinstance(value, str):
                    formatted_content += f"**{key.replace("_", " ").title()}:** {value}\n\n"
                elif isinstance(value, list):
                    formatted_content += f"**{key.replace("_", " ").title()}:**\n"
                    for item in value:
                        formatted_content += f"- {item}\n"
                    formatted_content += "\n"
        
        return formatted_content

    def _save_final_report(self, session_id: str, report_content: str) -> str:
        """Salva o relat√≥rio final em um arquivo Markdown."""
        report_dir = Path(f"analyses_data/{session_id}")
        report_dir.mkdir(parents=True, exist_ok=True)
        report_path = report_dir / "relatorio_final_completo.md"
        with open(report_path, "w", encoding="utf-8") as f:
            f.write(report_content)
        logger.info(f"‚úÖ Relat√≥rio final salvo em: {report_path}")
        return str(report_path)

    def _generate_report_statistics(self, modules: Dict[str, str], screenshots: List[str], final_report_content: str) -> Dict[str, Any]:
        """Gera estat√≠sticas sobre o relat√≥rio compilado."""
        stats = {
            "total_modules_expected": len(self.modules_order),
            "total_modules_compiled": len(modules),
            "total_screenshots_included": len(screenshots),
            "report_length_chars": len(final_report_content),
            "report_length_words": len(final_report_content.split()),
            "compilation_timestamp": datetime.now().isoformat()
        }
        return stats

# Inst√¢ncia global
comprehensive_report_generator_v3 = ComprehensiveReportGeneratorV3()


